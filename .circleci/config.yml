# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

commands:
  destroy-environment:
    description: Destroy EKS cluster if the job fails
    steps:
      - run:
          name: Destroy EKS cluster Nodes
          when: on_fail
          command: |
            echo "Destroying EKS cluster Nodes"
            cd infrastructure/
            aws cloudformation delete-stack --stack-name eks-nodes --region=us-east-1
     
      - run:
          name: Destroy EKS cluster
          when: on_fail
          command: |
            echo "Destroying EKS cluster"
            cd infrastructure/
            aws cloudformation delete-stack --stack-name eks --region=us-east-1

      - run:
          name: Destroy Network Components
          when: on_fail
          command: |
            echo "Destroying Network Components"
            cd infrastructure/
            aws cloudformation delete-stack --stack-name network --region=us-east-1
                       
jobs:
  linting:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-and-push:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install docker and verify version
          command: |
            apk add docker-cli
                        
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true

      - run:
          name: Docker Version check
          command: docker version
        
      - run:
          name: Login to Docker Hub
          command: echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      - run:
          name: Build docker image
          command: |
            chmod u+x run_docker.sh
            ./run_docker.sh
            docker images | grep "hello-world"
      - run:
          name: push docker image to docker hub
          command: |
            chmod u+x upload_docker.sh
            ./upload_docker.sh

  create-eks-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Deploy Network
          command: |
            cd infrastructure/
            aws cloudformation create-stack --stack-name network-1 --template-body file://stacks/network.yml --parameters file://parameters/network.json --region=us-east-1 --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name network-1 --region us-east-1
      - run:
          name: Deploy EKS cluster
          command: |
            cd infrastructure/
            aws cloudformation create-stack --stack-name eks-1 --template-body file://stacks/eks.yml --parameters file://parameters/eks.json --region=us-east-1 --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name eks-1 --region us-east-1

      - run:
          name: Deploy EKS Nodes
          command: |
            cd infrastructure/
            aws cloudformation create-stack --stack-name eks-nodes-1 --template-body file://stacks/eks-nodes.yml --parameters file://parameters/eks-nodes.json --region=us-east-1 --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name eks-nodes-1 --region us-east-1

  deploy-app-to-kubernetes:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            chmod +x ./kubectl
#            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
      - run:
          name: Deploy to Kubernetes Cluster
          command: |
            aws eks --region us-east-1 update-kubeconfig --name capstone
            ./kubectl apply -f kubernetes/deployment.yml
            ./kubectl apply -f kubernetes/service.yml


workflows:
  version: 2
  default:
    jobs:
      - linting
      - build-and-push:
          context: dockerhub
          requires: [linting]
      - create-eks-cluster:
          requires: [build-and-push]
      - deploy-app-to-kubernetes:
          requires: [create-eks-cluster]
